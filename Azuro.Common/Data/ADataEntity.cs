using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Xml.Serialization;
using Azuro.Common;
using Azuro.Common.Collections;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace Azuro.Data
{
   /// <summary>
   /// An DataEntity with an integer identity ID column
   /// </summary>
   [Obsolete( "Use DataEntityWithIdentityId<T> or DataEntity instead" )]
   [Serializable]
   public abstract class ADataEntity : DataEntityWithIdentityId<int>
   {
   }

   /// <summary>
   /// All Data Entities for use with the Azuro Data Access Layer are derived from this 
   /// class. It implements an ID, ReturnValue and Parent property by default.
   /// </summary>
   [Serializable]
   public abstract partial class DataEntityWithIdentityId<T> : DataEntity
       where T : IComparable<T>
   {
      private T m_id;

      /// <summary>
      /// Constructor.
      /// </summary>
      public DataEntityWithIdentityId()
         : base()
      {
      }

      /// <summary>
      /// Constructor.
      /// </summary>
      /// <param name="id">The ID of the entity.</param>
      public DataEntityWithIdentityId( T id )
         : base()
      {
         m_id = id;
      }

      /// <summary>
      /// ID.
      /// </summary>
      [DatabaseColumn( "ID", IsKey = true, IsAutoGenerated = true )]
      [ReadOnly( true ), Category( "Internal" )]
      public T ID
      {
         get { return m_id; }
         set { m_id = value; IsDirty = true; }
      }
   }

   /// <summary>
   /// All Data Entities for use with the Azuro Data Access Layer are derived from this 
   /// class. 
   /// </summary>
   [Serializable]
   public abstract partial class DataEntity : IDeserializationCallback
   {
      private int m_returnValue;
      private bool m_isDirty;
      [NonSerialized]
      private ADataEntityCache m_cache;
      private StoredProcedureAttribute m_storedProcedureAttribute;
      [NonSerialized]
      private List<KeyColumn> m_keyColumns;

      /// <summary>
      /// Constructor.
      /// </summary>
      public DataEntity()
      {
         InitDataEntity();
      }

      public void OnDeserialization( object sender )
      {
         InitDataEntity();
      }

      private void InitDataEntity()
      {
         m_cache = new ADataEntityCache( this );
         m_keyColumns = GetKeyColumns();
      }

      private List<KeyColumn> GetKeyColumns()
      {
         List<KeyColumn> keyColumns = m_cache.GetKeyColumns( GetType() );

         if( keyColumns == null )
         {
            keyColumns = new List<KeyColumn>();

            foreach( PropertyInfo property in GetType().GetProperties() )
            {
               DatabaseColumnAttribute[] dbCols = AttributeHelper.GetCustomAttributes<DatabaseColumnAttribute>( property );

               foreach( var dbCol in dbCols )
               {

                  if( !dbCol.IsKey )
                  {
                     continue;
                  }

                  var keyColumn = new KeyColumn(
                     property,
                     m_cache.LateBound,
                     GetType(),
                     dbCol.ColumnName,
                     property.Name,
                     dbCol.IsAutoGenerated,
                     dbCol.NewKey,
                     dbCol.NewKeyTarget );

                  keyColumns.Add( keyColumn );
               }
            }

            m_cache.UpdateKeyColumns( GetType(), keyColumns );
         }

         return keyColumns;
      }

      /// <summary>
      /// The return value when executing a stored procedure.
      /// Some issues:
      /// It currently only works for stored procedures. Some thought can be given to implementing return
      /// values for text based executions, but that is a future consideration.
      /// TODO: Problem here is the return value's name could be different for different implementations.
      /// </summary>
      [DatabaseColumn( "Return_Value", ParameterName = "Return_Value" )]
      [Browsable( false ), Category( "Internal" )]
      [XmlIgnore]
      public int ReturnValue
      {
         get { return m_returnValue; }
         set { m_returnValue = value; }
      }

      /// <summary>
      /// Gets or sets whether the entity is dirty, have been changed.
      /// <para>Typical usage would be to do all changes and then save all the data.</para>
      /// </summary>
      [Browsable( false ), XmlIgnore]
      public bool IsDirty
      {
         get
         {
            IsDirtyAttribute ida = AttributeHelper.GetCustomAttribute<IsDirtyAttribute>( GetType() );
            return ida == null ? true : ida.UseIsDirty ? m_isDirty : true;
         }
         set { m_isDirty = value; }
      }

      [Browsable( false )]
      [XmlIgnore]
      public List<KeyColumn> KeyColumns
      {
         get { return m_keyColumns; }
      }

      #region StoredProcedureAttribute Helper Properties

      private StoredProcedureAttribute StoredProcedureAttribute
      {
         get
         {
            if( m_storedProcedureAttribute == null )
            {
               m_storedProcedureAttribute = AttributeHelper.GetCustomAttribute<StoredProcedureAttribute>( this.GetType() ) ?? new StoredProcedureAttribute();
            }

            return m_storedProcedureAttribute;
         }
      }


      /// <summary>
      /// Return the ListProcedure as per the StoredProcedureAttribute set for the entity.
      /// </summary>
      [XmlIgnore]
      [Browsable( false )]
      public string ListProcedure
      {
         get { return StoredProcedureAttribute.ListProcedure; }
      }

      /// <summary>
      /// Return the UpdateProcedure as per the StoredProcedureAttribute set for the entity.
      /// </summary>
      [XmlIgnore]
      [Browsable( false )]
      public string UpdateProcedure
      {
         get { return StoredProcedureAttribute.UpdateProcedure; }
      }

      /// <summary>
      /// Return the InsertProcedure as per the StoredProcedureAttribute set for the entity.
      /// </summary>
      [XmlIgnore]
      [Browsable( false )]
      public string InsertProcedure
      {
         get { return StoredProcedureAttribute.InsertProcedure; }
      }

      /// <summary>
      /// Return the FetchProcedure as per the StoredProcedureAttribute set for the entity.
      /// </summary>
      [XmlIgnore]
      [Browsable( false )]
      public string FetchProcedure
      {
         get { return StoredProcedureAttribute.FetchProcedure; }
      }

      /// <summary>
      /// Return the DeleteProcedure as per the StoredProcedureAttribute set for the entity.
      /// </summary>
      [XmlIgnore]
      [Browsable( false )]
      public string DeleteProcedure
      {
         get { return StoredProcedureAttribute.DeleteProcedure; }
      }

      #endregion

      /// <summary>
      /// Fill the entity's fields based on the supplied DataRow.
      /// </summary>
      /// <param name="dr">A <see cref="DataRow">DataRow</see> to use for filling the Entity.</param>
      public virtual void Fill( DataRow dr )
      {
         Fill( dr, this.GetType().GetProperties() );
      }

      /// <summary>
      /// Fill the entity's fields based on the supplied DataRow.
      /// </summary>
      /// <param name="dr">A <see cref="DataRow">DataRow</see> to use for filling the Entity.</param>
      /// <param name="properties">The properties.</param>
      public virtual void Fill( DataRow dr, IEnumerable<PropertyInfo> properties )
      {
         foreach( PropertyInfo pi in properties )
         {
            if( pi.CanRead )
            {
               DatabaseColumnAttribute dbca = AttributeHelper.GetCustomAttribute<DatabaseColumnAttribute>( pi );
               if( dbca == null )
                  continue;

               if( dr.Table.Columns.Contains( dbca.ColumnName ) )
               {
                  if( !Convert.IsDBNull( dr[ dbca.ColumnName ] ) )
                     pi.SetValue( this, Util.ChangeType( dr[ dbca.ColumnName ], pi.PropertyType ), null );
               }
            }
         }
         m_isDirty = false;
      }

      /// <summary>
      /// Fill the entity's fields based on the supplied IDataReader.
      /// </summary>
      /// <param name="reader">A <see cref="IDataReader">IDataReader</see> to use for filling the Entity.</param>
      /// <remarks> The reader must be advanced to the correct row from which to fill the entity.</remarks>
      public virtual void Fill( IDataReader reader )
      {
         Fill( reader, this.GetType().GetProperties() );
      }

      /// <summary>
      /// Fill the entity's fields based on the supplied IDataReader.
      /// </summary>
      /// <param name="reader">A <see cref="IDataReader">IDataReader</see> to use for filling the Entity.</param>
      /// <remarks> The reader must be advanced to the correct row from which to fill the entity.</remarks>
      /// <param name="properties">The properties.</param>
      public virtual void Fill( IDataReader reader, IEnumerable<PropertyInfo> properties )
      {
         Fill( reader, properties, null );
      }

      public virtual void Fill( IDataReader reader, IEnumerable<PropertyInfo> properties, DataTable dt )
      {
         Fill( reader, properties, dt, null );
      }

      public void Fill( IDataReader reader, IEnumerable<PropertyInfo> properties, DataTable dt, string sqlCommand )
      {
         if( dt == null )
         {
            dt = reader.GetSchemaTable();
         }

         List<Triplet<PropertyInfo, DatabaseColumnAttribute, PropertySet>> cache = m_cache.GetFillCache( sqlCommand, this );

         if( (sqlCommand == null) || (cache == null) )
         {
            cache = new List<Triplet<PropertyInfo, DatabaseColumnAttribute, PropertySet>>();

            foreach( PropertyInfo pi in properties )
            {
               if( pi.CanRead )
               {
                  DatabaseColumnAttribute dbca = AttributeHelper.GetCustomAttribute<DatabaseColumnAttribute>( pi );
                  if( dbca == null )
                     continue;

                  DataRow[] drSchema = dt.Select( string.Format( "ColumnName='{0}'", dbca.ColumnName ) );
                  if( drSchema.Length == 1 )
                  {
                     var setter = m_cache.LateBound.CreatePropertySetter( pi.Name, pi.DeclaringType );

                     cache.Add(
                         new Triplet<PropertyInfo, DatabaseColumnAttribute, PropertySet>(
                             pi,
                             dbca,
                             setter ) );
                  }
               }
            }

            if( sqlCommand != null )
            {
               m_cache.UpdateFillCache( sqlCommand, this, cache );
            }
         }

         foreach( Triplet<PropertyInfo, DatabaseColumnAttribute, PropertySet> trip in cache )
         {
            PropertyInfo pi = trip.A;
            DatabaseColumnAttribute dbca = trip.B;
            PropertySet setter = trip.C;

            object value = reader[ dbca.ColumnName ];

            if( !Convert.IsDBNull( value ) )
               setter( this, Util.ChangeType( value, pi.PropertyType ) );
         }

         m_isDirty = false;
      }

      /// <summary>
      /// For anonymous calls in the List methods
      /// </summary>
      /// <param name="entity"></param>
      /// <returns></returns>
      public static bool CheckDirty( DataEntity entity )
      {
         return entity.IsDirty;
      }
   }
}
