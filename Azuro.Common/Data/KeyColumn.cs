using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Diagnostics;
using Azuro.Common;

namespace Azuro.Data
{
    public class KeyColumn
    {
        private object m_defaultValue;
        //[NonSerialized]
        private LateBound m_lateBound;
        private PropertyInfo m_property;
        //[NonSerialized]
        private PropertyGet m_propertyGetter;
        //[NonSerialized]
        private PropertySet m_propertySetter;
        //[NonSerialized]
        private CallMethodWithResult m_createValueCall;
        private static readonly Dictionary<Type, object> g_valueTypeDefaultValues = new Dictionary<Type, object>();

        private KeyColumn()
        {
        }

        public KeyColumn(
           PropertyInfo property,
           LateBound lateBound,
           Type entityType,
           string columnName,
           string propertyName,
           bool isAutoGenerated,
           string newKey,
           KeyTarget newKeyTarget)
        {
            m_property = property;
            m_lateBound = lateBound;
            EntityType = entityType;
            ColumnName = columnName;
            PropertyName = propertyName;
            IsAutoGenerated = isAutoGenerated;
            NewKey = newKey;
            NewKeyTarget = newKeyTarget;

            if (!IsAutoGenerated && string.IsNullOrEmpty(NewKey))
            {
                throw new DataObjectException(string.Format("A value for the property {1} on {0}'s can not be generated. The NewKey param in the DataColumn attribute was not set", EntityType, m_property.Name, Environment.NewLine));
            }

            m_defaultValue = GetDefaultValue();
            m_propertyGetter = lateBound.CreatePropertyGetter(PropertyName, EntityType);

            if (!IsAutoGenerated)
            {
                m_propertySetter = lateBound.CreatePropertySetter(PropertyName, EntityType);
                m_createValueCall = GetCreateValueMethodCall();
            }
        }

        public bool HasDefaultValue(DataEntity entity)
        {
            Debug.Assert(entity.GetType() == EntityType, "Entity of the incorrect type given. Expecting " + EntityType + " got " + entity.GetType());
            object value = m_propertyGetter(entity);

            return Convert.Equals(m_defaultValue, value);
        }

        public void GenerateValue(DataEntity entity)
        {
            //Auto generated properties are given a value by the DB so dont process them.
            if (IsAutoGenerated)
            {
                return;
            }

            //Generate the value and update the entity.
            object value = m_createValueCall(entity, new object[0]);
            m_propertySetter(entity, value);
        }

        private CallMethodWithResult GetCreateValueMethodCall()
        {
            if (IsAutoGenerated)
            {
                return null;
            }

            Type targetType;

            switch (NewKeyTarget)
            {
                case KeyTarget.Class:
                    targetType = EntityType;
                    break;

                case KeyTarget.Property:
                    targetType = m_property.PropertyType;
                    break;

                default:
                    throw new ArgumentOutOfRangeException("Unknown KeyTarget: " + NewKeyTarget);
            }

            if (!NewKey.EndsWith("()"))
            {
                throw new DataObjectException("NewKey must end with a () to indicate a method call: " + EntityType);
            }

            string methodName = NewKey.Substring(0, NewKey.Length - 2);

            MethodInfo mi = targetType.GetMethod(methodName);

            if (mi == null)
            {
                throw new DataObjectException("Method " + methodName + " not found on " + targetType);
            }

            return m_lateBound.CreateMethodCallWithResult(mi);
        }

        private object GetDefaultValue()
        {
            if (!m_property.PropertyType.IsValueType)
            {
                return null;
            }

            lock (g_valueTypeDefaultValues)
            {
                object value;

                if (!g_valueTypeDefaultValues.TryGetValue(m_property.PropertyType, out value))
                {
                    value = Activator.CreateInstance(m_property.PropertyType);
                    g_valueTypeDefaultValues[m_property.PropertyType] = value;
                }

                return value;
            }
        }

        public Type EntityType { get; set; }
        public string ColumnName { get; set; }
        public string PropertyName { get; set; }
        public bool IsAutoGenerated { get; set; }
        public string NewKey { get; set; }
        public KeyTarget NewKeyTarget { get; set; }
    }
}
